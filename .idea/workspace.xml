<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="CargoProjects">
    <cargoProject FILE="$PROJECT_DIR$/Cargo.toml">
      <package file="$PROJECT_DIR$/daemon">
        <feature name="default" enabled="true" />
      </package>
      <package file="$PROJECT_DIR$/entry">
        <feature name="default" enabled="true" />
      </package>
      <package file="$PROJECT_DIR$/examples">
        <feature name="default" enabled="true" />
      </package>
      <package file="$PROJECT_DIR$/mi7">
        <feature name="default" enabled="true" />
      </package>
      <package file="$PROJECT_DIR$/worker">
        <feature name="default" enabled="true" />
      </package>
    </cargoProject>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="b800460c-d6d8-4e86-87d3-7337626a45bb" name="更改" comment="feat(config): 引入配置管理模块支持系统参数化配置&#10;&#10;- 添加 Config 结构体及子配置结构体（共享内存、日志、HTTP、队列）&#10;- 实现配置文件的加载、保存和验证功能，使用 TOML 格式- 提供全局配置单例管理和便捷访问函数- 添加默认配置和配置错误处理机制- 更新 daemon、entry 和 worker 模块以使用配置系统- 添加配置示例文件 config.toml 和 config_example.rs 示例&#10;- 引入 fs2、toml、thiserror 和 tempfile 依赖支持配置功能&#10;- 实现安全的多进程日志系统适配配置的日志路径和格式&#10;- 支持从多个路径自动查找并加载配置文件- 添加配置模块">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Cargo.lock" beforeDir="false" afterPath="$PROJECT_DIR$/Cargo.lock" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/entry/Cargo.toml" beforeDir="false" afterPath="$PROJECT_DIR$/entry/Cargo.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/entry/src/main.rs" beforeDir="false" afterPath="$PROJECT_DIR$/entry/src/main.rs" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/entry/src/protocols/http_server.rs" beforeDir="false" afterPath="$PROJECT_DIR$/entry/src/protocols/http_server.rs" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="RsBuildProfile:test" />
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Rust File" />
        <option value="HTTP Request" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="SET_USER_NAME_GLOBALLY" value="false" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;gx1727&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/gx1727/mi7soft-rust.git&quot;,
    &quot;accountId&quot;: &quot;31196fc0-0898-43d4-ab19-eb9b800983d8&quot;
  }
}</component>
  <component name="HttpClientOnboardingState">{
  &quot;isOnboardingCommentShown&quot;: true
}</component>
  <component name="MacroExpansionManager">
    <option name="directoryName" value="XPoMvlDq" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="ProjectErrors" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="34JhEVlL8mWgadhFuVj4dklsZKn" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Cargo.Build mi7soft_rust.executor": "Run",
    "Cargo.Run mi7soft-rust.executor": "Run",
    "Cargo.Run mi7soft.executor": "Run",
    "HTTP 请求.test | #2.executor": "Run",
    "HTTP 请求.test | #3.executor": "Run",
    "HTTP 请求.test | #4.executor": "Run",
    "HTTP 请求.test | GET request to example server.executor": "Run",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252": "true",
    "RunOnceActivity.git.unshallow": "true",
    "RunOnceActivity.rust.reset.selective.auto.import": "true",
    "git-widget-placeholder": "master",
    "ignore.virus.scanning.warn.message": "true",
    "last_opened_file_path": "D:/work/mi7/mi7soft-rust",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "org.rust.cargo.project.model.PROJECT_DISCOVERY": "true",
    "org.rust.cargo.project.model.impl.CargoExternalSystemProjectAware.subscribe.first.balloon": "",
    "org.rust.first.attach.projects": "true",
    "settings.editor.selected.configurable": "preferences.pluginManager",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RunDashboard">
    <option name="configurationStatuses">
      <map>
        <entry key="HttpClient.HttpRequestRunConfigurationType">
          <value>
            <map>
              <entry key="test | #4" value="STOPPED" />
              <entry key="test | GET request to example server" value="STOPPED" />
            </map>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="RunManager" selected="Cargo.Test mi7soft-rust">
    <configuration name="Run mi7soft" type="CargoCommandRunConfiguration" factoryName="Cargo Command" temporary="true">
      <option name="command" value="run --package mi7soft --bin mi7soft" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <configuration name="Test mi7soft-rust" type="CargoCommandRunConfiguration" factoryName="Cargo Command">
      <option name="buildProfileId" value="test" />
      <option name="command" value="test --workspace" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <configuration name="test | GET request to example server" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$PROJECT_DIR$/tests/test.http" executionIdentifier="GET request to example server" runType="运行单个请求">
      <method v="2" />
    </configuration>
    <configuration name="test | #4" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$PROJECT_DIR$/tests/test.http" executionIdentifier="#4" index="4" runType="运行单个请求">
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="HTTP 请求.test | #4" />
        <item itemvalue="HTTP 请求.test | GET request to example server" />
        <item itemvalue="Cargo.Run mi7soft" />
      </list>
    </recent_temporary>
  </component>
  <component name="RustProjectSettings">
    <option name="rustcTarget" value="x86_64-unknown-linux-gnu" />
    <option name="toolchainHomeDirectory" value="$USER_HOME$/.cargo/bin" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="默认任务">
      <changelist id="b800460c-d6d8-4e86-87d3-7337626a45bb" name="更改" comment="" />
      <created>1760937470785</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1760937470785</updated>
      <workItem from="1760937471857" duration="13000" />
      <workItem from="1760937493353" duration="2321000" />
      <workItem from="1760942053269" duration="8626000" />
      <workItem from="1760960027691" duration="7147000" />
      <workItem from="1761000686067" duration="135000" />
      <workItem from="1761006372382" duration="15978000" />
      <workItem from="1761045140699" duration="2145000" />
      <workItem from="1761048508479" duration="13000" />
      <workItem from="1761049374669" duration="6535000" />
      <workItem from="1761094884282" duration="7326000" />
      <workItem from="1761180342490" duration="14190000" />
      <workItem from="1761230070014" duration="1569000" />
      <workItem from="1761265426676" duration="17458000" />
    </task>
    <task id="LOCAL-00001" summary="1">
      <option name="closed" value="true" />
      <created>1760939200646</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1760939200646</updated>
    </task>
    <task id="LOCAL-00002" summary="1">
      <option name="closed" value="true" />
      <created>1760939760393</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1760939760393</updated>
    </task>
    <task id="LOCAL-00003" summary="1">
      <option name="closed" value="true" />
      <created>1760942803193</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1760942803193</updated>
    </task>
    <task id="LOCAL-00004" summary="1">
      <option name="closed" value="true" />
      <created>1760947493283</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1760947493283</updated>
    </task>
    <task id="LOCAL-00005" summary="1">
      <option name="closed" value="true" />
      <created>1760950000914</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1760950000914</updated>
    </task>
    <task id="LOCAL-00006" summary="chore(deps): 移除未使用的依赖项并更新配置&#10;&#10;-从 Cargo.toml 中移除了 criterion、crossbeam、libc 等多个依赖&#10;- 更新了 Rust edition为 2024&#10;- 移除了示例文件 src/examples.rs- 清理了 Cargo.lock 中不再需要的包条目&#10;- 添加了描述和许可证信息到包配置中">
      <option name="closed" value="true" />
      <created>1760950919806</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1760950919806</updated>
    </task>
    <task id="LOCAL-00007" summary="feat(ipc): 实现跨进程消息队列生产者和消费者&#10;&#10;- 添加消息生产者程序，可发送任务到共享队列&#10;- 添加异步工作进程，从队列接收并处理任务- 实现任务处理模拟与队列状态监控&#10;- 支持多实例工作进程并发处理任务&#10;- 添加优雅退出机制与处理统计功能">
      <option name="closed" value="true" />
      <created>1760950934487</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1760950934487</updated>
    </task>
    <task id="LOCAL-00008" summary="1">
      <option name="closed" value="true" />
      <created>1761006402244</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1761006402244</updated>
    </task>
    <task id="LOCAL-00009" summary="1">
      <option name="closed" value="true" />
      <created>1761022150647</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1761022150647</updated>
    </task>
    <task id="LOCAL-00010" summary="1">
      <option name="closed" value="true" />
      <created>1761029258234</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1761029258234</updated>
    </task>
    <task id="LOCAL-00011" summary="feat(http): 实现HTTP服务器消息处理功能- 添加 bincode依赖用于命令序列化&#10;- 实现 HTTP服务器路由和状态管理&#10;- 添加消息发送处理器支持 POST 请求- 实现状态查询和通用路径处理器- 更新模块结构和命令引用路径&#10;- 添加 HTTP 测试用例和请求示例">
      <option name="closed" value="true" />
      <created>1761101101173</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1761101101173</updated>
    </task>
    <task id="LOCAL-00012" summary="feat(http): 实现HTTP服务器消息处理功能- 添加 bincode依赖用于命令序列化&#10;- 实现 HTTP服务器路由和状态管理&#10;- 添加消息发送处理器支持 POST 请求- 实现状态查询和通用路径处理器- 更新模块结构和命令引用路径&#10;- 添加 HTTP 测试用例和请求示例">
      <option name="closed" value="true" />
      <created>1761210388658</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1761210388658</updated>
    </task>
    <task id="LOCAL-00013" summary="feat(examples): 添加跨进程队列和Tokio异步使用示例&#10;&#10;- 新增基础队列使用示例 (basic_queue_usage.rs)&#10;- 添加Tokio异步队列示例 (tokio_async_queue.rs)&#10;- 实现跨进程队列完整示例 (cross_process_queue.rs)&#10;- 创建示例包配置文件 (examples/Cargo.toml)&#10;- 添加示例文档和运行说明 (examples/README.md)- 提供HTTP集成测试脚本 (PowerShell和Bash版本)&#10;- 实现安全的共享内存队列包装器- 展示非阻塞队列操作模式- 演示多生产者-多消费者异步模式&#10;- 包含错误处理和资源清理机制">
      <option name="closed" value="true" />
      <created>1761271625005</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1761271625005</updated>
    </task>
    <task id="LOCAL-00014" summary="refactor(queue): 简化队列接口并优化恢复逻辑&#10;&#10;- 移除 try_push 和 try_pop 方法，统一使用 push 和 pop 接口- 简化 EOWNERDEAD 恢复逻辑，内联处理避免重复代码&#10;- 更新示例代码以匹配新的接口命名&#10;- 添加多个测试用例验证队列行为- 升级 libc依赖版本至0.2.177&#10;- 移除不再使用的系统时间导入和警告日志">
      <option name="closed" value="true" />
      <created>1761278511162</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1761278511162</updated>
    </task>
    <task id="LOCAL-00015" summary="refactor(queue): 引入配置化队列并优化接口设计- 添加 QueueConfig 结构体支持自定义容量和槽位大小&#10;- 实现泛型 CrossProcessQueue 支持编译期配置&#10;- 提供 DefaultCrossProcessQueue、SmallCrossProcessQueue 等类型别名&#10;- 增加 create_with_config 和 config 查询方法&#10;- 更新示例和文档以使用新接口&#10;- 移除旧的固定配置队列实现- 重命名示例包从 mi7-examples 到 examples&#10;- 添加 configurable_queue_test.rs 示例&#10;- 更新 README 和相关引用路径&#10;- 优化队列状态和配置信息展示">
      <option name="closed" value="true" />
      <created>1761283875247</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1761283875247</updated>
    </task>
    <task id="LOCAL-00016" summary="feat(config): 引入配置管理模块支持系统参数化配置&#10;&#10;- 添加 Config 结构体及子配置结构体（共享内存、日志、HTTP、队列）&#10;- 实现配置文件的加载、保存和验证功能，使用 TOML 格式- 提供全局配置单例管理和便捷访问函数- 添加默认配置和配置错误处理机制- 更新 daemon、entry 和 worker 模块以使用配置系统- 添加配置示例文件 config.toml 和 config_example.rs 示例&#10;- 引入 fs2、toml、thiserror 和 tempfile 依赖支持配置功能&#10;- 实现安全的多进程日志系统适配配置的日志路径和格式&#10;- 支持从多个路径自动查找并加载配置文件- 添加配置模块单元测试验证功能正确性">
      <option name="closed" value="true" />
      <created>1761288970289</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1761288970289</updated>
    </task>
    <option name="localTasksCounter" value="17" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="chore(deps): 移除未使用的依赖项并更新配置&#10;&#10;-从 Cargo.toml 中移除了 criterion、crossbeam、libc 等多个依赖&#10;- 更新了 Rust edition为 2024&#10;- 移除了示例文件 src/examples.rs- 清理了 Cargo.lock 中不再需要的包条目&#10;- 添加了描述和许可证信息到包配置中" />
    <MESSAGE value="feat(ipc): 实现跨进程消息队列生产者和消费者&#10;&#10;- 添加消息生产者程序，可发送任务到共享队列&#10;- 添加异步工作进程，从队列接收并处理任务- 实现任务处理模拟与队列状态监控&#10;- 支持多实例工作进程并发处理任务&#10;- 添加优雅退出机制与处理统计功能" />
    <MESSAGE value="1" />
    <MESSAGE value="feat(http): 实现HTTP服务器消息处理功能- 添加 bincode依赖用于命令序列化&#10;- 实现 HTTP服务器路由和状态管理&#10;- 添加消息发送处理器支持 POST 请求- 实现状态查询和通用路径处理器- 更新模块结构和命令引用路径&#10;- 添加 HTTP 测试用例和请求示例" />
    <MESSAGE value="feat(examples): 添加跨进程队列和Tokio异步使用示例&#10;&#10;- 新增基础队列使用示例 (basic_queue_usage.rs)&#10;- 添加Tokio异步队列示例 (tokio_async_queue.rs)&#10;- 实现跨进程队列完整示例 (cross_process_queue.rs)&#10;- 创建示例包配置文件 (examples/Cargo.toml)&#10;- 添加示例文档和运行说明 (examples/README.md)- 提供HTTP集成测试脚本 (PowerShell和Bash版本)&#10;- 实现安全的共享内存队列包装器- 展示非阻塞队列操作模式- 演示多生产者-多消费者异步模式&#10;- 包含错误处理和资源清理机制" />
    <MESSAGE value="refactor(queue): 简化队列接口并优化恢复逻辑&#10;&#10;- 移除 try_push 和 try_pop 方法，统一使用 push 和 pop 接口- 简化 EOWNERDEAD 恢复逻辑，内联处理避免重复代码&#10;- 更新示例代码以匹配新的接口命名&#10;- 添加多个测试用例验证队列行为- 升级 libc依赖版本至0.2.177&#10;- 移除不再使用的系统时间导入和警告日志" />
    <MESSAGE value="refactor(queue): 引入配置化队列并优化接口设计- 添加 QueueConfig 结构体支持自定义容量和槽位大小&#10;- 实现泛型 CrossProcessQueue 支持编译期配置&#10;- 提供 DefaultCrossProcessQueue、SmallCrossProcessQueue 等类型别名&#10;- 增加 create_with_config 和 config 查询方法&#10;- 更新示例和文档以使用新接口&#10;- 移除旧的固定配置队列实现- 重命名示例包从 mi7-examples 到 examples&#10;- 添加 configurable_queue_test.rs 示例&#10;- 更新 README 和相关引用路径&#10;- 优化队列状态和配置信息展示" />
    <MESSAGE value="feat(config): 引入配置管理模块支持系统参数化配置&#10;&#10;- 添加 Config 结构体及子配置结构体（共享内存、日志、HTTP、队列）&#10;- 实现配置文件的加载、保存和验证功能，使用 TOML 格式- 提供全局配置单例管理和便捷访问函数- 添加默认配置和配置错误处理机制- 更新 daemon、entry 和 worker 模块以使用配置系统- 添加配置示例文件 config.toml 和 config_example.rs 示例&#10;- 引入 fs2、toml、thiserror 和 tempfile 依赖支持配置功能&#10;- 实现安全的多进程日志系统适配配置的日志路径和格式&#10;- 支持从多个路径自动查找并加载配置文件- 添加配置模块" />
    <option name="LAST_COMMIT_MESSAGE" value="feat(config): 引入配置管理模块支持系统参数化配置&#10;&#10;- 添加 Config 结构体及子配置结构体（共享内存、日志、HTTP、队列）&#10;- 实现配置文件的加载、保存和验证功能，使用 TOML 格式- 提供全局配置单例管理和便捷访问函数- 添加默认配置和配置错误处理机制- 更新 daemon、entry 和 worker 模块以使用配置系统- 添加配置示例文件 config.toml 和 config_example.rs 示例&#10;- 引入 fs2、toml、thiserror 和 tempfile 依赖支持配置功能&#10;- 实现安全的多进程日志系统适配配置的日志路径和格式&#10;- 支持从多个路径自动查找并加载配置文件- 添加配置模块" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="com.jetbrains.cidr.execution.debugger.OCBreakpointType">
          <url>file://$PROJECT_DIR$/mi7/src/queue.rs</url>
          <line>115</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>